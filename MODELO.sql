SET SERVEROUTPUT ON;

-- ELIMINACION DE TABLAS
DROP TABLE AEROPUERTO;
DROP TABLE AVION;
DROP TABLE BOLETA;
DROP TABLE CIUDAD;
DROP TABLE CLIENTE;
DROP TABLE DESTINO;
DROP TABLE DETALLE;
DROP TABLE ITINERARIO;
DROP TABLE ORIGEN;
DROP TABLE PAIS;
DROP TABLE PASAJE;
DROP TABLE PASAJERO;
DROP TABLE VUELO;
DROP TABLE CARRITO;
DROP TABLE ASIENTO;
DROP TABLE VUELO_ASIENTO;


-- CREACION DE TABLAS
CREATE TABLE PAIS(
	ID_PAIS NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50)
);
/
CREATE TABLE CIUDAD(
	ID_CIUDAD NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	PAIS NVARCHAR2(50)
);
/
CREATE TABLE AEROPUERTO(
	ID_AEROPUERTO NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	CIUDAD NVARCHAR2(50),
	DIRECCION NVARCHAR2(50)
);
/
CREATE TABLE AVION(
	ID_AVION NVARCHAR2(50) NOT NULL,
	MODELO NVARCHAR2(50),
	CAPACIDAD NUMBER,
	ANIO NUMBER
);
/
CREATE TABLE ORIGEN(
	ID_ORIGEN NVARCHAR2(50) NOT NULL,
	AEROPUERTO NVARCHAR2(50)
);
/
CREATE TABLE DESTINO(
	ID_DESTINO NVARCHAR2(50) NOT NULL,
	AEROPUERTO NVARCHAR2(50)
);
/
CREATE TABLE ITINERARIO(
	ID_ITINERARIO NVARCHAR2(50) NOT NULL,
	FECHA_SALIDA NVARCHAR2(50),
	HORA_SALIDA NVARCHAR2(50),
	FECHA_LLEGADA NVARCHAR2(50),
	HORA_LLEGADA NVARCHAR2(50),
	ORIGEN NVARCHAR2(50),
	DESTINO NVARCHAR2(50)
);
/
CREATE TABLE VUELO(
	ID_VUELO NVARCHAR2(50) NOT NULL,
	CAPACIDAD NUMBER,
	AVION NVARCHAR2(50),
	ITINERARIO NVARCHAR2(50),
	VALOR NUMBER
);
/
CREATE TABLE ASIENTO(
	ID_ASIENTO NVARCHAR2(50) NOT NULL
);
/
CREATE TABLE VUELO_ASIENTO(
	ID_ASIENTO NVARCHAR2(50) NOT NULL,
	ID_VUELO NVARCHAR2(50) NOT NULL,
	ESTADO NVARCHAR2(50)
);
/
CREATE TABLE PASAJE(
    ID_PASAJE NVARCHAR2(50) NOT NULL,
    TARIFA NUMBER DEFAULT NULL,
    ASIENTO NVARCHAR2(50) DEFAULT NULL,
    VUELO NVARCHAR2(50) DEFAULT NULL,
    PASAJERO NVARCHAR2(50) DEFAULT NULL,
    ESTADO NVARCHAR2(50) 
);
/
-- alter table pasaje
 -- add ESTADO NVARCHAR2(50);

 --alter table libros drop column precio;

 --alter table cliente  modify fecha_nacimiento date;

CREATE TABLE CARRITO(
    ID_PASAJE NVARCHAR2(50) NOT NULL,
    ID_CLIENTE NVARCHAR2(50) NOT NULL,
    TOTAL_PASAJE NUMBER,
	TOTAL_TARIFA NUMBER
);

CREATE TABLE TARIFA(
    ID_TARIFA NUMBER NOT NULL,
    NOMBRE NVARCHAR2(50),
    PRECIO NUMBER
);
/
CREATE TABLE CLIENTE(
	NUMERO_DOCUMENTO NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	APELLIDO NVARCHAR2(50),
	FECHA_NACIMIENTO NVARCHAR2(50),
	GENERO NVARCHAR2(50),
	TIPO_DOCUMENTO NVARCHAR2(50), 
	TELEFONO NVARCHAR2(50),
	EMAIL NVARCHAR2(50) UNIQUE,
	CONTRASENA NVARCHAR2(50)
);
/
CREATE TABLE PASAJERO(
	NUMERO_DOCUMENTO NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	APELLIDO NVARCHAR2(50),
	FECHA_NACIMIENTO DATE,
	GENERO NVARCHAR2(50),
	TIPO_DOCUMENTO NVARCHAR2(50),
	FECHA_VENCIMIENTO_DOCUMENTO DATE,
	TELEFONO NVARCHAR2(50),
	CORREO NVARCHAR2(50),
	NACIONALIDAD NVARCHAR2(50),
);
/
CREATE TABLE BANCO(
	NUMERO_TARJETA NVARCHAR2(50) NOT NULL,
	TIPO NVARCHAR2(50),
	CVV NUMBER,
	MES NVARCHAR2(50),
	ANIO NUMBER
);
/
CREATE TABLE ADMINISTRADOR(
	NOMBRE NVARCHAR2(50) NOT NULL,
	CONTRASENA NVARCHAR2(50)
);
/
CREATE TABLE BOLETA(
    ID_BOLETA NVARCHAR2(50) NOT NULL,
    CLIENTE NVARCHAR2(50),
    MULTA NUMBER,
    TOTAL NUMBER,
    FECHA DATE,
    HORA NVARCHAR2(20),
    TOTAL_FINAL NUMBER
);
/
CREATE TABLE DETALLE(
    ID_BOLETA NVARCHAR2(50) NOT NULL,
    PASAJE NVARCHAR2(50) NOT NULL,
    PRECIO_PASAJE NUMBER,
    PRECIO_TARIFA NUMBER,
    TOTAL_DETALLE NUMBER
);
------------------------------
/
-- DEFINICION DE CLAVES PRIMARIAS
ALTER TABLE AEROPUERTO ADD CONSTRAINT PK_AEROPUERTO PRIMARY KEY (ID_AEROPUERTO);
ALTER TABLE AVION ADD CONSTRAINT PK_AVION PRIMARY KEY (ID_AVION);
ALTER TABLE CIUDAD ADD CONSTRAINT PK_CIUDAD PRIMARY KEY (ID_CIUDAD);
ALTER TABLE DESTINO ADD CONSTRAINT PK_DESTINO PRIMARY KEY (ID_DESTINO);
ALTER TABLE ITINERARIO ADD CONSTRAINT PK_ITINERARIO PRIMARY KEY (ID_ITINERARIO);
ALTER TABLE ORIGEN ADD CONSTRAINT PK_ORIGEN PRIMARY KEY (ID_ORIGEN);
ALTER TABLE PAIS ADD CONSTRAINT PK_PAIS PRIMARY KEY (ID_PAIS);
ALTER TABLE VUELO ADD CONSTRAINT PK_VUELO PRIMARY KEY (ID_VUELO);
ALTER TABLE ASIENTO ADD CONSTRAINT PK_ASIENTO PRIMARY KEY(ID_ASIENTO);
ALTER TABLE VUELO_ASIENTO ADD CONSTRAINT PK_VUELO_ASIENTO PRIMARY KEY(ID_ASIENTO,ID_VUELO);
ALTER TABLE PASAJERO ADD CONSTRAINT PK_PASAJERO PRIMARY KEY (NUMERO_DOCUMENTO);
ALTER TABLE CARRITO ADD CONSTRAINT PK_CARRITO PRIMARY KEY (ID_PASAJE,ID_CLIENTE);
ALTER TABLE PASAJE ADD CONSTRAINT PK_PASAJE PRIMARY KEY (ID_PASAJE);
ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE PRIMARY KEY (NUMERO_DOCUMENTO);
ALTER TABLE TARIFA ADD CONSTRAINT PK_TARIFA PRIMARY KEY (ID_TARIFA);
ALTER TABLE BANCO ADD CONSTRAINT PK_BANCO PRIMARY KEY (NUMERO_TARJETA);
ALTER TABLE ADMINISTRADOR ADD CONSTRAINT PK_ADMINISTRADOR PRIMARY KEY (NOMBRE);
ALTER TABLE BOLETA ADD CONSTRAINT PK_BOLETA PRIMARY KEY (ID_BOLETA);
ALTER TABLE DETALLE ADD CONSTRAINT PK_DETALLE PRIMARY KEY (ID_BOLETA,PASAJE);
/


-- DEFINICION DE CLAVES FORANEAS
ALTER TABLE VUELO ADD CONSTRAINT FK_VUELO_AVION FOREIGN KEY (AVION) REFERENCES AVION (ID_AVION) ON DELETE CASCADE;
ALTER TABLE VUELO ADD CONSTRAINT FK_VUELO_ITINERARIO FOREIGN KEY (ITINERARIO) REFERENCES ITINERARIO (ID_ITINERARIO) ON DELETE CASCADE;
ALTER TABLE ITINERARIO ADD CONSTRAINT FK_ITINERARIO_DESTINO FOREIGN KEY (DESTINO) REFERENCES DESTINO (ID_DESTINO) ON DELETE CASCADE;
ALTER TABLE ITINERARIO ADD CONSTRAINT FK_ITINERARIO_ORIGEN FOREIGN KEY (ORIGEN) REFERENCES ORIGEN (ID_ORIGEN) ON DELETE CASCADE;
ALTER TABLE DESTINO ADD CONSTRAINT FK_DESTINO_AEROPUERTO FOREIGN KEY (AEROPUERTO) REFERENCES AEROPUERTO (ID_AEROPUERTO) ON DELETE CASCADE;
ALTER TABLE ORIGEN ADD CONSTRAINT FK_ORIGEN_AEROPUERTO FOREIGN KEY (AEROPUERTO) REFERENCES AEROPUERTO (ID_AEROPUERTO) ON DELETE CASCADE;
ALTER TABLE AEROPUERTO ADD CONSTRAINT FK_AEROPUERTO_CIUDAD FOREIGN KEY (CIUDAD) REFERENCES CIUDAD (ID_CIUDAD) ON DELETE CASCADE;
ALTER TABLE CIUDAD ADD CONSTRAINT FK_CIUDAD_PAIS FOREIGN KEY (PAIS) REFERENCES PAIS (ID_PAIS) ON DELETE CASCADE;
ALTER TABLE VUELO_ASIENTO ADD CONSTRAINT FK_VUELO FOREIGN KEY(ID_VUELO) REFERENCES VUELO(ID_VUELO) ON DELETE CASCADE;
ALTER TABLE VUELO_ASIENTO ADD CONSTRAINT FK_ASIENTO FOREIGN KEY(ID_ASIENTO) REFERENCES ASIENTO(ID_ASIENTO) ON DELETE CASCADE;
ALTER TABLE CARRITO ADD CONSTRAINT FK_CARRITO_PASAJE FOREIGN KEY (ID_PASAJE) REFERENCES PASAJE (ID_PASAJE) ON DELETE CASCADE;
ALTER TABLE CARRITO ADD CONSTRAINT FK_CARRITO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (NUMERO_DOCUMENTO) ON DELETE CASCADE;
ALTER TABLE PASAJE ADD CONSTRAINT FK_PASAJE_VUELO FOREIGN KEY (VUELO) REFERENCES VUELO (ID_VUELO) ON DELETE CASCADE;
ALTER TABLE PASAJE ADD CONSTRAINT FK_PASAJE_PASAJERO FOREIGN KEY (PASAJERO) REFERENCES PASAJERO (NUMERO_DOCUMENTO) ON DELETE CASCADE;
ALTER TABLE PASAJE ADD CONSTRAINT FK_TARIFA FOREIGN KEY (TARIFA) REFERENCES TARIFA (ID_TARIFA) ON DELETE CASCADE;
ALTER TABLE BOLETA ADD CONSTRAINT FK_BOLETA_CLIENTE FOREIGN KEY (CLIENTE) REFERENCES CLIENTE (NUMERO_DOCUMENTO) ON DELETE CASCADE;
ALTER TABLE DETALLE ADD CONSTRAINT FK_DETALLE_BOLETA FOREIGN KEY (ID_BOLETA) REFERENCES BOLETA (ID_BOLETA) ON DELETE CASCADE;
ALTER TABLE DETALLE ADD CONSTRAINT FK_DETALLE_PASAJE FOREIGN KEY (PASAJE) REFERENCES PASAJE (ID_PASAJE) ON DELETE CASCADE;
/

------------------------------------------------------------------------------
-------------------------------PAIS-------------------------------------------
-- CREACION DE FUNCION PARA VERIFICAR LA EXISTENCIA DE UN PAIS

CREATE OR REPLACE FUNCTION VERIFICAR_PAIS(
	ID_P IN PAIS.ID_PAIS%TYPE
) RETURN BOOLEAN
IS 
	AUX NUMBER;
BEGIN 
	SELECT COUNT(*) INTO AUX FROM PAIS WHERE ID_PAIS=UPPER(ID_P);
	IF AUX>0 THEN 
		RETURN TRUE;
	ELSE 
		RETURN FALSE;
	END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO SE HAN ENCONTRADO LOS DATOS');
			ROLLBACK;
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('HA OCURRIDO UN ERROR'|| SQLERRM);
			ROLLBACK;
END;
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA PAIS
/
CREATE OR REPLACE PROCEDURE INSERTAR_PAIS(
	 ID_P  IN PAIS.ID_PAIS%TYPE,
	 NOMBRE_P IN PAIS.NOMBRE%TYPE,
	 RESULTADO OUT NVARCHAR2,
   	 MENSAJE OUT NVARCHAR2
)
IS 
	PAIS_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_PAIS(ID_P)= FALSE THEN 
		LOCK TABLE PAIS IN ROW EXCLUSIVE MODE;
		INSERT INTO PAIS VALUES (ID_P,NOMBRE_P);
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE := 'EL PAIS FUE INGRESADO CON ÉXITO';
	ELSE
		RAISE PAIS_EXISTE;
	END IF;

	EXCEPTION
        WHEN PAIS_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE := 'EL PAIS YA EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA PAIS

create or replace PROCEDURE BORRAR_PAIS(
	 ID_P  IN PAIS.ID_PAIS%TYPE,
	 RESULTADO OUT NVARCHAR2,
   	 MENSAJE OUT NVARCHAR2
)
IS 
    PAIS_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_PAIS(ID_P)= TRUE THEN 
		LOCK TABLE PAIS IN ROW EXCLUSIVE MODE;
		DELETE FROM PAIS WHERE ID_PAIS=ID_P;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE := 'EL PAIS FUE BORRADO CON EXITO';
	ELSE
		RAISE PAIS_NO_EXISTE;
        RESULTADO := 'FALSE';
        MENSAJE := 'EL PAIS NO FUE BORRADO CON EXITO';
	END IF;

	EXCEPTION
        WHEN PAIS_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE := 'EL PAIS NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_PAIS;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA PAIS

create or replace PROCEDURE ACTUALIZAR_PAIS(
	 ID_P  IN PAIS.ID_PAIS%TYPE,
	 NOMBRE_P IN PAIS.NOMBRE%TYPE,
     RESULTADO OUT NVARCHAR2,
   	 MENSAJE OUT NVARCHAR2
)
IS 
    PAIS_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_PAIS(ID_P)= TRUE THEN 
		LOCK TABLE PAIS IN ROW EXCLUSIVE MODE;
        UPDATE PAIS
        SET PAIS.ID_PAIS = ID_P,
            PAIS.NOMBRE = NOMBRE_P 
        WHERE ID_P = PAIS.ID_PAIS;
		COMMIT;
        RESULTADO := 'TRUE';
        MENSAJE := 'EL PAIS FUE ACTUALIZADO CON EXITO';
	ELSE
		RESULTADO := 'FALSE';
        MENSAJE := 'EL PAIS NO FUE ACTUALIZADO CON EXITO';
	END IF;

	EXCEPTION
        WHEN PAIS_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE := 'EL PAIS NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;
		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END ACTUALIZAR_PAIS;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE PAIS

CREATE OR REPLACE TRIGGER MAYUSCULA_PAIS
BEFORE INSERT ON PAIS
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_PAIS := UPPER(:NEW.ID_PAIS);
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
END;
/
------------------------------------------------------------------------------
-------------------------------CIUDAD-----------------------------------------

-- CREACION DE FUNCION PARA VERIFICAR DATOS EN LA TABLA CIUDAD

CREATE OR REPLACE FUNCTION VERIFICAR_CIUDAD(
	ID_C IN CIUDAD.ID_CIUDAD%TYPE
) RETURN BOOLEAN

IS 
	AUX NUMBER;
BEGIN 
	SELECT COUNT(*) INTO AUX FROM CIUDAD WHERE ID_CIUDAD=UPPER(ID_C);
	IF AUX>0 THEN 
		RETURN TRUE;
	ELSE 
		RETURN FALSE;
	END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO SE HAN ENCONTRADO LOS DATOS');
			ROLLBACK;
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('HA OCURRIDO UN ERROR'|| SQLERRM);
			ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA CIUDAD

CREATE OR REPLACE PROCEDURE INSERTAR_CIUDAD(
	 ID_C  IN CIUDAD.ID_CIUDAD%TYPE,
	 NOMBRE_C IN CIUDAD.NOMBRE%TYPE,
	 ID_P IN CIUDAD.PAIS%TYPE,
	 RESULTADO OUT NVARCHAR2,
   	 MENSAJE OUT NVARCHAR2
)
IS 
	CIUDAD_EXISTE EXCEPTION;
	PAIS_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_PAIS(ID_P)=TRUE THEN
		IF VERIFICAR_CIUDAD(ID_C)= FALSE THEN 
			LOCK TABLE CIUDAD IN ROW EXCLUSIVE MODE;
			INSERT INTO CIUDAD VALUES (ID_C,NOMBRE_C,ID_P);
			COMMIT;
			RESULTADO := 'TRUE';
        	MENSAJE := 'LA CIUDAD FUE INGRESADA CON ÉXITO';
		ELSE 
			RAISE CIUDAD_EXISTE;
		END IF;
	ELSE
		RAISE PAIS_NO_EXISTE;
	END IF;

	EXCEPTION
		WHEN CIUDAD_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='LA CIUDAD YA EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
		WHEN PAIS_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL PAIS AL QUE PERTENECE LA CIUDAD NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
		WHEN OTHERS THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA CIUDAD

create or replace PROCEDURE BORRAR_CIUDAD(
   	 ID_C  IN CIUDAD.ID_CIUDAD%TYPE,
   	 RESULTADO OUT NVARCHAR2,
   	 MENSAJE OUT NVARCHAR2
)
IS 
    CIUDAD_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_CIUDAD(ID_C)= TRUE THEN 
		LOCK TABLE CIUDAD IN ROW EXCLUSIVE MODE;
		DELETE FROM CIUDAD WHERE ID_CIUDAD=ID_C;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE := 'LA CIUDAD FUE BORRADA CON EXITO';
	ELSE
		RAISE CIUDAD_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN CIUDAD_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='LA CIUDAD NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_CIUDAD;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA CIUDAD

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CIUDAD
(
    ID_C  IN CIUDAD.ID_CIUDAD%TYPE,
	NOMBRE_C IN CIUDAD.NOMBRE%TYPE,
	ID_P IN CIUDAD.PAIS%TYPE
)
IS 
    CIUDAD_NO_EXISTE EXCEPTION;
    PAIS_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_CIUDAD(ID_C)= TRUE THEN
		IF VERIFICAR_PAIS(ID_P) = TRUE THEN 
			LOCK TABLE CIUDAD IN ROW EXCLUSIVE MODE;
	        UPDATE CIUDAD
	        SET ID_CIUDAD= ID_C,
	            NOMBRE = NOMBRE_C,
	            PAIS = ID_P
	        WHERE ID_CIUDAD= ID_C;
			COMMIT;
		ELSE
			RAISE PAIS_NO_EXISTE;
		END IF;
	ELSE
		RAISE CIUDAD_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN CIUDAD_NO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'CIUDAD QUE DESEA ACTUALIZAR NO EXISTE');
			ROLLBACK;
		WHEN PAIS_NO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'PAIS A INGRESAR NO EXISTE');
			ROLLBACK;

		WHEN OTHERS THEN 
			RAISE_APPLICATION_ERROR(-20001,'ERROR SISTEMA');
			ROLLBACK;
END ACTUALIZAR_CIUDAD;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE CIUDAD

CREATE OR REPLACE TRIGGER MAYUSCULA_CIUDAD
BEFORE INSERT ON CIUDAD
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_CIUDAD := UPPER(:NEW.ID_CIUDAD);
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.PAIS := UPPER(:NEW.PAIS);
END;
/
------------------------------------------------------------------------------
-------------------------------AEROPUERTO-------------------------------------

CREATE OR REPLACE FUNCTION VERIFICAR_AEROPUERTO(
    ID IN AEROPUERTO.ID_AEROPUERTO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM AEROPUERTO WHERE ID_AEROPUERTO= UPPER(ID);
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL AEROPUERTO YA EXISTE O NO');
            ROLLBACK;
END;
/
-- CREACION DE FUNCION PARA VERIFICAR QUE NO HAYAN DOS AEROPUERTOS EN UNA MISMA CIUDAD

CREATE OR REPLACE FUNCTION VERIFICAR_AEROPUERTO_CIUDAD(
    ID_C IN AEROPUERTO.CIUDAD%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM AEROPUERTO WHERE CIUDAD= ID_C;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL AEROPUERTO YA EXISTE O NO');
            ROLLBACK;
END;

-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA AEROPUERTO
/
CREATE OR REPLACE PROCEDURE INSERTAR_AEROPUERTO(
    NOMBREA IN AEROPUERTO.NOMBRE%TYPE,
    CIUDADA IN AEROPUERTO.CIUDAD%TYPE,
    DIRE IN AEROPUERTO.DIRECCION%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS
    AEROPUERTO_EXISTE EXCEPTION;
    CIUDAD_NO_EXISTE EXCEPTION;
BEGIN
    
    IF VERIFICAR_AEROPUERTO_CIUDAD(CIUDADA) = FALSE THEN
        IF VERIFICAR_CIUDAD(CIUDADA) = TRUE THEN
            LOCK TABLE AEROPUERTO IN ROW EXCLUSIVE MODE;
            INSERT INTO AEROPUERTO VALUES('X',NOMBREA,CIUDADA,DIRE);
            COMMIT;
            RESULTADO := 'TRUE';
        	MENSAJE := 'EL AEROPUERTO FUE INGRESADO CON ÉXITO';
        ELSE
            RAISE CIUDAD_NO_EXISTE;
        END IF;
    ELSE
        RAISE AEROPUERTO_EXISTE;
    END IF;
    
    EXCEPTION
        WHEN AEROPUERTO_EXISTE THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='EL AEROPUERTO YA EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN CIUDAD_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='LA CIUDAD A LA QUE PERTENECE EL AEROPUERTO NO EXISTE';
            ROLLBACK;
        WHEN OTHERS THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA AEROPUERTO

create or replace PROCEDURE BORRAR_AEROPUERTO(
    ID IN AEROPUERTO.ID_AEROPUERTO%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS 
    AEROPUERTO_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_AEROPUERTO(ID)= TRUE THEN 
		LOCK TABLE AEROPUERTO IN ROW EXCLUSIVE MODE;
		DELETE FROM AEROPUERTO WHERE ID_AEROPUERTO=ID;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE :='EL AEROPUERTO FUE BORRADO CON EXITO';
	ELSE
		RAISE AEROPUERTO_NO_EXISTE;
        RESULTADO := 'FALSE';
        MENSAJE :='EL AEROPUERTO NO FUE BORRADO CON EXITO';
	END IF;

	EXCEPTION
        WHEN AEROPUERTO_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL AEROPUERTO NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_AEROPUERTO;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA AEROPUERTO

CREATE OR REPLACE PROCEDURE ACTUALIZAR_AEROPUERTO(
    ID IN AEROPUERTO.ID_AEROPUERTO%TYPE,
    NOMBREA IN AEROPUERTO.NOMBRE%TYPE,
    CIUDADA IN AEROPUERTO.CIUDAD%TYPE,
    DIRE IN AEROPUERTO.DIRECCION%TYPE
)
IS 
    CIUDAD_NO_EXISTE EXCEPTION;
    AEROPUERTO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_CIUDAD(CIUDADA)= TRUE THEN
		IF VERIFICAR_AEROPUERTO(ID) = FALSE THEN 
			LOCK TABLE AEROPUERTO IN ROW EXCLUSIVE MODE;
	        UPDATE AEROPUERTO
	        SET ID_AEROPUERTO = ID,
	            NOMBRE = NOMBREA,
	            CIUDAD = CIUDADA,
	            DIRECCION = DIRE 
	        WHERE ID_AEROPUERTO = ID;
			COMMIT;
		ELSE
			RAISE AEROPUERTO_EXISTE;
		END IF;
	ELSE
		RAISE CIUDAD_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN CIUDAD_NO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'CIUDAD INGRESADA NO EXISTE');
			ROLLBACK;
		WHEN AEROPUERTO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'AEROPUERTO INGRESADO YA EXISTE');
			ROLLBACK;

		WHEN OTHERS THEN 
			RAISE_APPLICATION_ERROR(-20001,'ERROR SISTEMA');
			ROLLBACK;
END ACTUALIZAR_AEROPUERTO;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE AEROPUERTO

CREATE SEQUENCE ID_AEROPUERTO
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER FORMATO_AEROPUERTO
BEFORE INSERT ON AEROPUERTO
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_AEROPUERTO := 'ARPT-'|| ID_AEROPUERTO.NEXTVAL;
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.CIUDAD := UPPER(:NEW.CIUDAD);
    :NEW.DIRECCION := UPPER(:NEW.DIRECCION);
END;
/
------------------------------------------------------------------------------
---------------------------------AVION----------------------------------------

-- CREACION DE FUNCION PARA VERIFICAR LA EXISTENCIA DE UN AVION

CREATE OR REPLACE FUNCTION VERIFICAR_AVION(
    ID IN AVION.ID_AVION%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM AVION WHERE ID_AVION = ID;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL AVION YA EXISTE O NO');
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA AVION

CREATE OR REPLACE PROCEDURE INSERTAR_AVION(
    MODELOA IN AVION.MODELO%TYPE,
    ANIOA IN AVION.ANIO%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS
    AVION_EXISTE EXCEPTION;
BEGIN   
        LOCK TABLE AVION IN ROW EXCLUSIVE MODE;
        INSERT INTO AVION VALUES('X',MODELOA,72,ANIOA);
        COMMIT;
        RESULTADO := 'TRUE';
        MENSAJE :='EL AVIÓN FUE INGRESADO CON ÉXITO';

    EXCEPTION
        WHEN OTHERS THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/

-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA AVION

create or replace PROCEDURE BORRAR_AVION(
    ID IN AVION.ID_AVION%TYPE,
    RESULTADO OUT NVARCHAR2,
   	 MENSAJE OUT NVARCHAR2
)
IS 
    AVION_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_AVION(ID)= TRUE THEN 
		LOCK TABLE AVION IN ROW EXCLUSIVE MODE;
		DELETE FROM AVION WHERE ID_AVION=ID;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE :='EL AVION FUE BORRADO CON EXITO';
	ELSE
		RAISE AVION_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN AVION_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL AVION NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_AVION;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA AVION

CREATE OR REPLACE PROCEDURE ACTUALIZAR_AVION(
    ID IN AVION.ID_AVION%TYPE,
    MODELOA IN AVION.MODELO%TYPE,
    CAPAC IN AVION.CAPACIDAD%TYPE,
    ANIOA IN AVION.ANIO%TYPE
)
IS 
    AVION_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_AVION(ID)= TRUE THEN 
		LOCK TABLE AVION IN ROW EXCLUSIVE MODE;
        UPDATE AVION
        SET AVION.ID_AVION = ID,
            AVION.MODELO = MODELOA,
            AVION.CAPACIDAD = CAPAC,
            AVION.ANIO = ANIOA 
        WHERE ID = AVION.ID_AVION;
		COMMIT;
	ELSE
		RAISE AVION_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN AVION_NO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'AVION INGRESADO NO EXISTE');
			ROLLBACK;

		WHEN OTHERS THEN 
			RAISE_APPLICATION_ERROR(-20001,'ERROR SISTEMA');
			ROLLBACK;
END ACTUALIZAR_AVION;
/

-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE AVION

CREATE SEQUENCE ID_AVION
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FORMATO_AVION
BEFORE INSERT ON AVION
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_AVION := 'AVION-'|| ID_AVION.NEXTVAL;
    :NEW.MODELO := UPPER(:NEW.MODELO);
END;
/

------------------------------------------------------------------------------
-------------------------------ORIGEN-----------------------------------------

-- FUNCION QUE VERIFICA QUE YA SE INGRESO UN ORIGEN CON ESE AEROPUERTO

CREATE OR REPLACE FUNCTION VERIFICAR_ORIGEN(
    ID IN ORIGEN.ID_ORIGEN%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM ORIGEN WHERE ID_ORIGEN= ID;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL ORIGEN YA EXISTE O NO');
            ROLLBACK;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_ORIGEN_AEROPUERTO(
    AEROP IN ORIGEN.AEROPUERTO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM ORIGEN WHERE AEROPUERTO= AEROP;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL ORIGEN YA EXISTE O NO');
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA ORIGEN

CREATE OR REPLACE PROCEDURE INSERTAR_ORIGEN(
    AEROP IN ORIGEN.AEROPUERTO%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS
    ORIGEN_EXISTE EXCEPTION;
    AEROPUERTO_NO_EXISTE EXCEPTION;
BEGIN
    
    IF VERIFICAR_ORIGEN_AEROPUERTO(AEROP) = FALSE THEN
        IF VERIFICAR_AEROPUERTO(AEROP) = TRUE THEN
            LOCK TABLE ORIGEN IN ROW EXCLUSIVE MODE;
            INSERT INTO ORIGEN VALUES('X',AEROP);
            COMMIT;
            RESULTADO := 'TRUE';
        	MENSAJE :='EL ORIGEN FUE INGRESADO CON ÉXITO';
        ELSE
            RAISE AEROPUERTO_NO_EXISTE;
        END IF;
    ELSE
        RAISE ORIGEN_EXISTE;
    END IF;
    
    EXCEPTION
        WHEN ORIGEN_EXISTE THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='EL ORIGEN YA EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN AEROPUERTO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL AEROPUERTO INGRESADO NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN OTHERS THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA ORIGEN

create or replace PROCEDURE BORRAR_ORIGEN(
   	ID IN ORIGEN.ID_ORIGEN%TYPE,
   	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS 
    ORIGEN_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_ORIGEN(ID)= TRUE THEN 
		LOCK TABLE ORIGEN IN ROW EXCLUSIVE MODE;
		DELETE FROM ORIGEN WHERE ID_ORIGEN=ID;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE :='EL ORIGEN FUE BORRADO CON EXITO';
	ELSE
		RAISE ORIGEN_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN ORIGEN_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL ORIGEN NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_ORIGEN;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA ORIGEN

CREATE OR REPLACE PROCEDURE ACTUALIZAR_ORIGEN(
    ID IN ORIGEN.ID_ORIGEN%TYPE,
    AEROP IN ORIGEN.AEROPUERTO%TYPE
)
IS 
    ORIGEN_NO_EXISTE EXCEPTION;

BEGIN 
	IF VERIFICAR_ORIGEN(ID)= TRUE THEN 
		LOCK TABLE ORIGEN IN ROW EXCLUSIVE MODE;
        UPDATE ORIGEN
        SET ORIGEN.ID_ORIGEN =ID,
    		ORIGEN.AEROPUERTO= AEROP 
        WHERE ID= ORIGEN.ID_ORIGEN;
		COMMIT;
	ELSE
		RAISE ORIGEN_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN ORIGEN_NO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'ORIGEN QUE DESEA ACTUALIZAR NO EXISTE');
			ROLLBACK;

		WHEN OTHERS THEN 
			RAISE_APPLICATION_ERROR(-20001,'ERROR SISTEMA');
			ROLLBACK;
END ACTUALIZAR_ORIGEN;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE ORIGEN

CREATE SEQUENCE ID_ORIGEN
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FORMATO_ORIGEN
BEFORE INSERT ON ORIGEN
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_ORIGEN := 'ORIG-'|| ID_ORIGEN.NEXTVAL;
    :NEW.AEROPUERTO := UPPER(:NEW.AEROPUERTO);
END;
/

------------------------------------------------------------------------------
-------------------------------DESTINO----------------------------------------

CREATE OR REPLACE FUNCTION VERIFICAR_DESTINO(
    ID IN DESTINO.ID_DESTINO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM DESTINO WHERE ID_DESTINO= ID;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL DESTINO YA EXISTE O NO');
            ROLLBACK;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_DESTINO_AEROPUERTO(
    ID_A IN DESTINO.AEROPUERTO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM DESTINO WHERE AEROPUERTO= ID_A;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL DESTINO YA EXISTE O NO');
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA DESTINO

CREATE OR REPLACE PROCEDURE INSERTAR_DESTINO(
    AEROP IN DESTINO.AEROPUERTO%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS
    DESTINO_EXISTE EXCEPTION;
    AEROPUERTO_NO_EXISTE EXCEPTION;
BEGIN
    
    IF VERIFICAR_DESTINO_AEROPUERTO(AEROP) = FALSE THEN
        IF VERIFICAR_AEROPUERTO(AEROP) = TRUE THEN
            LOCK TABLE DESTINO IN ROW EXCLUSIVE MODE;
            INSERT INTO DESTINO VALUES('X',AEROP);
            COMMIT;
            RESULTADO := 'TRUE';
        	MENSAJE :='EL DESTINO FUE INGRESADO CON ÉXITO';
        ELSE
            RAISE AEROPUERTO_NO_EXISTE;
        END IF;
    ELSE
        RAISE DESTINO_EXISTE;
    END IF;
    
    EXCEPTION
        WHEN DESTINO_EXISTE THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='EL DESTINO YA EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN AEROPUERTO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL AEROPUERTO ASIGNADO NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN OTHERS THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA DESTINO

create or replace PROCEDURE BORRAR_DESTINO(
   	ID IN DESTINO.ID_DESTINO%TYPE,
	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS 
    DESTINO_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_DESTINO(ID)= TRUE THEN 
		LOCK TABLE DESTINO IN ROW EXCLUSIVE MODE;
		DELETE FROM DESTINO WHERE ID_DESTINO=ID;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE :='EL DESTINO FUE BORRADO CON EXITO';
	ELSE
		RAISE DESTINO_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN DESTINO_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL DESTINO NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_DESTINO;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA DESTINO

CREATE OR REPLACE PROCEDURE ACTUALIZAR_DESTINO(
    ID IN DESTINO.ID_DESTINO%TYPE,
    AEROP IN DESTINO.AEROPUERTO%TYPE
)
IS 
    DESTINO_NO_EXISTE EXCEPTION;

BEGIN 
	IF VERIFICAR_DESTINO(ID)= TRUE THEN 
		LOCK TABLE DESTINO IN ROW EXCLUSIVE MODE;
        UPDATE DESTINO
        SET DESTINO.ID_DESTINO= ID,
            DESTINO.AEROPUERTO = AEROP
        WHERE ID = DESTINO.ID_DESTINO;
		COMMIT;
	ELSE
		RAISE DESTINO_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN DESTINO_NO_EXISTE THEN 
			RAISE_APPLICATION_ERROR(-20001,'DESTINO QUE DESEA ACTUALIZAR NO EXISTE');
			ROLLBACK;

		WHEN OTHERS THEN 
			RAISE_APPLICATION_ERROR(-20001,'ERROR SISTEMA');
			ROLLBACK;
END ACTUALIZAR_DESTINO;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE DESTINO

CREATE SEQUENCE ID_DESTINO
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FORMATO_DESTINO
BEFORE INSERT ON DESTINO
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_DESTINO := 'DEST-'|| ID_DESTINO.NEXTVAL;
    :NEW.AEROPUERTO := UPPER(:NEW.AEROPUERTO);
END;
/
------------------------------------------------------------------------------
-------------------------------ITINERARIO-------------------------------------


CREATE OR REPLACE FUNCTION VERIFICAR_ITINERARIO(
    ID IN ITINERARIO.ID_ITINERARIO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM ITINERARIO WHERE ID_ITINERARIO= ID;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL ITINERARIO YA EXISTE O NO');
            ROLLBACK;
END;
/
-- CREACION DE FUNCION PARA VERIFICAR EL FORMATO DE LA HORA

CREATE OR REPLACE FUNCTION VERIFICAR_FORMATO_HORA(
    HRS IN ITINERARIO.HORA_SALIDA%TYPE
)RETURN BOOLEAN
IS
BEGIN
    IF LENGTH(HRS)= 5 AND (SUBSTR(HRS,3,1)=':') THEN 01/08/2020
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR EL FORMATO DE LA HORA');
            ROLLBACK;
END;
/
-- FUNCION PARA VERIFICAR QUE EL ORIGEN Y EL DESTINO NO SEAN LOS MISMOS

CREATE OR REPLACE FUNCTION VERIFICAR_ITINERARIO_OD(
    O IN ITINERARIO.ORIGEN%TYPE,
    D IN ITINERARIO.DESTINO%TYPE
)RETURN BOOLEAN
IS
    A1 VARCHAR2(20);
    A2 VARCHAR2(20);
BEGIN
    SELECT AEROPUERTO INTO A1 FROM ORIGEN WHERE ID_ORIGEN= O;
    SELECT AEROPUERTO INTO A2 FROM DESTINO WHERE ID_DESTINO= D;
    IF A1=A2 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR');
			RETURN FALSE;
            ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA ITINERARIO

CREATE OR REPLACE PROCEDURE INSERTAR_ITINERARIO(
    FECHAS IN ITINERARIO.FECHA_SALIDA%TYPE,    
    HORAS IN ITINERARIO.HORA_SALIDA%TYPE,
    FECHAL IN ITINERARIO.FECHA_LLEGADA%TYPE,
    HORAL IN ITINERARIO.HORA_LLEGADA%TYPE,
    ORIGENI IN ITINERARIO.ORIGEN%TYPE,
    DESTINOI IN ITINERARIO.DESTINO%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS
    HORA_INCORRECTA EXCEPTION;
    ORIGEN_NO_EXISTE EXCEPTION;
    DESTINO_NO_EXISTE EXCEPTION;
    MISMO_LUGAR EXCEPTION;
BEGIN
	IF VERIFICAR_ITINERARIO_OD(ORIGENI,DESTINOI) = FALSE THEN    
	    IF VERIFICAR_FORMATO_HORA(HORAS) = TRUE THEN
	        IF VERIFICAR_FORMATO_HORA(HORAL) = TRUE THEN
	        	IF VERIFICAR_ORIGEN(ORIGENI) = TRUE THEN
	        		IF VERIFICAR_DESTINO(DESTINOI) = TRUE THEN
				        LOCK TABLE ITINERARIO IN ROW EXCLUSIVE MODE;
				        INSERT INTO ITINERARIO VALUES('X',FECHAS,HORAS,FECHAL,HORAL,ORIGENI,DESTINOI);
				        COMMIT;
				        RESULTADO := 'TRUE';
        				MENSAJE :='EL ITINERARIO FUE INGRESADO CON ÉXITO';
				    ELSE
				        RAISE DESTINO_NO_EXISTE;
				    END IF;
				ELSE
				    RAISE ORIGEN_NO_EXISTE;
				END IF;
			ELSE
				RAISE HORA_INCORRECTA;
				END IF;
		ELSE
			RAISE HORA_INCORRECTA;
		END IF;
	ELSE
		RAISE MISMO_LUGAR;
	END IF;
    
    EXCEPTION
        WHEN MISMO_LUGAR THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='EL ORIGEN Y EL DESTINO DEBEN CONCURRIR A CIUDADES DISTINTAS';
            ROLLBACK;
        WHEN HORA_INCORRECTA THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL FORMATO DE HORA A INGRESAR ES INCORRECTO';
            ROLLBACK;
        WHEN ORIGEN_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL ORIGEN A INGRESAR NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN DESTINO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL DESTINO A INGRESAR NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN OTHERS THEN
        	RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/

-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA ITINERARIO

create or replace PROCEDURE BORRAR_ITINERARIO(
   	ID IN ITINERARIO.ID_ITINERARIO%TYPE,
   	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS 
    ITINERARIO_NO_EXISTE EXCEPTION;
BEGIN 
	IF VERIFICAR_ITINERARIO(ID)= TRUE THEN 
		LOCK TABLE ITINERARIO IN ROW EXCLUSIVE MODE;
		DELETE FROM ITINERARIO WHERE ID_ITINERARIO=ID;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE :='EL ITINERARIO FUE BORRADO CON EXITO';
	ELSE
		RAISE ITINERARIO_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN ITINERARIO_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL ITINERARIO NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_ITINERARIO;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA ITINERARIO

create or replace PROCEDURE ACTUALIZAR_ITINERARIO(
    ID IN ITINERARIO.ID_ITINERARIO%TYPE,
    FECHAS IN ITINERARIO.FECHA_SALIDA%TYPE,    
    HORAS IN ITINERARIO.HORA_SALIDA%TYPE,
    FECHAL IN ITINERARIO.FECHA_LLEGADA%TYPE,
    HORAL IN ITINERARIO.HORA_LLEGADA%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2
)
IS 
    ITINERARIO_NO_EXISTE EXCEPTION;

BEGIN 
	IF VERIFICAR_ITINERARIO(ID)= TRUE THEN 
		LOCK TABLE ITINERARIO IN ROW EXCLUSIVE MODE;
        UPDATE ITINERARIO
        SET ITINERARIO.ID_ITINERARIO= ID,
    		ITINERARIO.FECHA_SALIDA=  FECHAS,
            ITINERARIO.HORA_SALIDA= HORAS,
            ITINERARIO.FECHA_LLEGADA= FECHAL,
            ITINERARIO.HORA_LLEGADA= HORAL
        WHERE ID= ITINERARIO.ID_ITINERARIO;
		COMMIT;
        RESULTADO := 'TRUE';
        MENSAJE :='EL ITINERARIO FUE ACTUALIZADO CON EXITO';
	ELSE
		RAISE ITINERARIO_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN ITINERARIO_NO_EXISTE THEN 
            RESULTADO := 'FALSE';
        	MENSAJE :='EL ITINERARIO NO EXISTE EN LA BASE DE DATOS';
				ROLLBACK;

		WHEN OTHERS THEN 
            RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END ACTUALIZAR_ITINERARIO;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE ITINERARIO

CREATE SEQUENCE ID_ITINERARIO
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FORMATO_ITINERARIO
BEFORE INSERT ON ITINERARIO
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_ITINERARIO := 'ITNR-'|| ID_ITINERARIO.NEXTVAL;
END;
/

------------------------------------------------------------------------------
-------------------------------ASIENTO-------------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_ASIENTO
IS 
BEGIN
	FOR I IN 1..12 LOOP
		LOCK TABLE ASIENTO IN ROW EXCLUSIVE MODE;
		INSERT INTO ASIENTO VALUES ('A'||I);
		INSERT INTO ASIENTO VALUES ('B'||I);
		INSERT INTO ASIENTO VALUES ('C'||I);
		INSERT INTO ASIENTO VALUES ('D'||I);
		INSERT INTO ASIENTO VALUES ('E'||I);
		INSERT INTO ASIENTO VALUES ('F'||I);
		COMMIT;
	END LOOP;
END;
/
CALL INSERTAR_ASIENTO();
/

------------------------------------------------------------------------------
-------------------------------VUELO ASIENTO-------------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_VUELO_ASIENTO(
	ID_V IN VUELO_ASIENTO.ID_VUELO%TYPE
)
IS 
	CURSOR ASIENTOS IS SELECT ID_ASIENTO FROM ASIENTO;
    CODIGO_AUX NVARCHAR2(10);
BEGIN 
	OPEN ASIENTOS;
	FOR I IN 1..72 LOOP
	    FETCH ASIENTOS INTO CODIGO_AUX;
	    INSERT INTO VUELO_ASIENTO VALUES (CODIGO_AUX,ID_V,'DISPONIBLE');
	END LOOP;
    CLOSE ASIENTOS;

END;
/

------------------------------------------------------------------------------
-------------------------------VUELO------------------------------------------


CREATE OR REPLACE FUNCTION VERIFICAR_VUELO(
	ID_V IN VUELO.ID_VUELO%TYPE
) RETURN BOOLEAN

IS 
	AUX NUMBER;
BEGIN 
	SELECT COUNT(*) INTO AUX FROM VUELO WHERE ID_VUELO=ID_V;
	IF AUX>0 THEN 
		RETURN TRUE;
	ELSE 
		RETURN FALSE;
	END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO SE HAN ENCONTRADO LOS DATOS');
			ROLLBACK;
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('HA OCURRIDO UN ERROR'|| SQLERRM);
			ROLLBACK;
END;
/
-- FUNCION PARA VERIFICAR QUE NO HAYAN VUELOS CON EL MISMO ITINERARIO NI CON EL MISMO AVION

CREATE OR REPLACE FUNCTION VERIFICAR_VUELO_ITINERARIO(
	ID_I IN VUELO.ITINERARIO%TYPE
) RETURN BOOLEAN

IS 
	AUX NUMBER;
BEGIN 
	SELECT COUNT(*) INTO AUX FROM VUELO WHERE ITINERARIO=ID_I;
	IF AUX>0 THEN 
		RETURN TRUE;
	ELSE 
		RETURN FALSE;
	END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO SE HAN ENCONTRADO LOS DATOS');
			ROLLBACK;
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('HA OCURRIDO UN ERROR'|| SQLERRM);
			ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA VUELO

CREATE OR REPLACE PROCEDURE INSERTAR_VUELO(
	AVION_V IN VUELO.AVION%TYPE,
 	ITINERARIO_V IN VUELO.ITINERARIO%TYPE,
	VALORV IN VUELO.VALOR%TYPE,
	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2	
)
IS 
	AVION_NO_EXISTE EXCEPTION;
	ITINERARIO_NO_EXISTE EXCEPTION;
	VALOR_INCORRECTO EXCEPTION;
	VUELO_EXISTE EXCEPTION;

BEGIN
	IF VERIFICAR_VUELO_ITINERARIO(ITINERARIO_V) = FALSE THEN 
		IF VERIFICAR_ITINERARIO(ITINERARIO_V)= TRUE THEN 
			IF VERIFICAR_AVION(AVION_V)=TRUE THEN
				IF VALORV> 0 THEN
					LOCK TABLE VUELO IN ROW EXCLUSIVE MODE;
					INSERT INTO VUELO VALUES ('X',72,AVION_V,ITINERARIO_V,VALORV);
					COMMIT;
					RESULTADO := 'TRUE';
        			MENSAJE :='EL VUELO FUE INGRESADO CON ÉXITO';
				ELSE
					RAISE VALOR_INCORRECTO;
				END IF;
	        ELSE 
	        	RAISE AVION_NO_EXISTE;
	        END IF;
	    ELSE
	    	RAISE ITINERARIO_NO_EXISTE;
	   	END IF;
	ELSE
		RAISE VUELO_EXISTE;
	END IF;

   	EXCEPTION
   	WHEN AVION_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL AVIÓN INGRESADO NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
   	WHEN ITINERARIO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL ITINERARIO INGRESADO NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
    WHEN VALOR_INCORRECTO THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL PRECIO DEL VUELO NO PUEDE SER NEGATIVO O CERO';
            ROLLBACK;

 	WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;
/
-- CREACION DE PROCEDIMIENTO PARA BORRAR DATOS A LA TABLA VUELO

create or replace PROCEDURE BORRAR_VUELO(
	ID_V IN VUELO.ID_VUELO%TYPE,
	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2	
)
IS 
    VUELO_NO_EXISTE EXCEPTION;

BEGIN 
	IF VERIFICAR_VUELO(ID_V)= TRUE THEN 
		LOCK TABLE VUELO IN ROW EXCLUSIVE MODE;
		DELETE FROM VUELO WHERE ID_VUELO=ID_V;
		COMMIT;
		RESULTADO := 'TRUE';
        MENSAJE :='EL VUELO FUE BORRADO CON EXITO';
	ELSE
		RAISE VUELO_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN VUELO_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL VUELO NO EXISTE EN LA BASE DE DATOS';
			ROLLBACK;

		WHEN OTHERS THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
			ROLLBACK;
END BORRAR_VUELO;
/
-- CREACION DE PROCEDIMIENTO PARA ACTUALIZAR DATOS A LA TABLA VUELO

create or replace PROCEDURE ACTUALIZAR_VUELO(
	ID_V IN VUELO.ID_VUELO%TYPE,
	AVION_V IN VUELO.AVION%TYPE,
	VALORV IN VUELO.VALOR%TYPE,
    RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2

)
IS 
   	VUELO_NO_EXISTE EXCEPTION;

BEGIN 
	IF VERIFICAR_VUELO(ID_V)= TRUE THEN 
		LOCK TABLE VUELO IN ROW EXCLUSIVE MODE;
        UPDATE VUELO
        SET VUELO.ID_VUELO= ID_V ,
			VUELO.AVION= AVION_V,
			VUELO.VALOR=VALORV
        WHERE ID_V= VUELO.ID_VUELO;
		COMMIT;
        RESULTADO := 'TRUE';
        MENSAJE :='EL VUELO FUE ACTUALIZADO CON EXITO';
	ELSE
		RAISE VUELO_NO_EXISTE;
	END IF;

	EXCEPTION
        WHEN VUELO_NO_EXISTE THEN 
			RESULTADO := 'FALSE';
        	MENSAJE :='EL VUELO NO EXISTE EN LA BASE DE DATOS';
            ROLLBACK;

		WHEN OTHERS THEN 
            RESULTADO := 'FALSE';
        	MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END ACTUALIZAR_VUELO;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE VUELO

CREATE SEQUENCE ID_VUELO
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FORMATO_VUELO
BEFORE INSERT ON VUELO
FOR EACH ROW
DECLARE

BEGIN
    :NEW.ID_VUELO:= 'VUELO '|| ID_VUELO.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER FORMATO_VUELO2
AFTER INSERT ON VUELO
FOR EACH ROW
DECLARE

BEGIN

    INSERTAR_VUELO_ASIENTO(:NEW.ID_VUELO);

END;
/

------------------------------------------------------------------------------
------------------------------- CLIENTE ------------------------------------------

CREATE OR REPLACE FUNCTION VERIFICAR_RUT(
    NUMERICO IN CLIENTE.NUMERO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
    TRUE_RUT VARCHAR2 (9);
    DIGITO NUMBER := 0;
    SUMA NUMBER := 0;
    DIGITOF NUMBER := 0; 
    LARGO NUMBER := LENGTH(NUMERICO);
BEGIN
    IF (LARGO = 8) THEN
        TRUE_RUT := LPAD (NUMERICO,9,'0');
    ELSE
        TRUE_RUT := NUMERICO;
    END IF;

    DIGITO := SUBSTR (TRUE_RUT,9,1);
    SUMA := SUBSTR (TRUE_RUT,1,1) * 3;
    SUMA := (SUMA + SUBSTR (TRUE_RUT,2,1) * 2);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,3,1) * 7);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,4,1) * 6);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,5,1) * 5);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,6,1) * 4);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,7,1) * 3);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,8,1) * 2);

    WHILE (SUMA > 11) LOOP
    SUMA := SUMA -11;    
    END LOOP;
    
    DIGITOF := (11 - SUMA);

    IF (DIGITOF = 10) THEN
        DIGITOF := 0;
    END IF;

    IF (DIGITOF = DIGITO) THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_DNI(
	DNI IN CLIENTE.NUMERO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
	letrasValidas VARCHAR2(23) := 'TRWAGMYFPDXBNJZSQVHLCKE';
	letraCorrecta VARCHAR2(1);
	letraLeida VARCHAR2(1) := SUBSTR (DNI,-1,1);
	dni2 NUMBER := TO_NUMBER(SUBSTR(DNI,1,LENGTH(DNI)-1));
	RESTO NUMBER;
BEGIN
	RESTO := MOD(dni2,23);
	letraCorrecta := SUBSTR(letrasValidas, RESTO+1, 1);
	IF (letraCorrecta = letraLeida) THEN
		RETURN TRUE;
    ELSE
 		RETURN FALSE;
 	END IF;
END; 
/
CREATE OR REPLACE FUNCTION VERIFICAR_DOCUMENTO(
    TIPO IN CLIENTE.TIPO_DOCUMENTO%TYPE,
    DOC IN CLIENTE.NUMERO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
BEGIN
	IF TIPO = 'PASAPORTE' AND LENGTH(DOC) BETWEEN 4 AND 20 THEN
		RETURN TRUE;

	ELSIF TIPO = 'RUT' AND VERIFICAR_RUT(DOC) = TRUE THEN
		RETURN TRUE; 

    ELSIF TIPO = 'DNI' AND VERIFICAR_DNI(DOC) = TRUE THEN
		RETURN TRUE;

    ELSIF TIPO = 'RG' AND LENGTH(DOC) = 9 THEN
		RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR EL DOCUMENTO');
            ROLLBACK;
END;
/
-- CREACION DE FUNCION PARA VER SI EL CLIENTE YA EXISTE EN LA BD

CREATE OR REPLACE FUNCTION VERIFICAR_CLIENTE(
    ID IN CLIENTE.NUMERO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM CLIENTE WHERE NUMERO_DOCUMENTO= ID;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL CLIENTE YA ESTA REGISTRADO O NO');
            ROLLBACK;
END;
/
-- CREACION DE FUNCION PARA

CREATE OR REPLACE FUNCTION VERIFICAR_EDAD(
    FECHA IN CLIENTE.FECHA_NACIMIENTO%TYPE
)RETURN BOOLEAN
IS
	EDAD NUMBER;
	FECHA_ACTUAL DATE := SYSDATE;
BEGIN
	EDAD := EXTRACT(YEAR FROM FECHA_ACTUAL) - EXTRACT(YEAR FROM FECHA);
    IF EDAD > 17 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL CLIENTE ES MAYOR DE EDAD O NO');
            ROLLBACK;
END;
/
-- CREACION DE FUNCION PARA VERIFICAR SI YA EXISTE ESE EMAIL

CREATE OR REPLACE FUNCTION VERIFICAR_EMAIL(
    EMAILC IN CLIENTE.EMAIL%TYPE
)RETURN BOOLEAN
IS
	EXISTE NUMBER;
BEGIN
	SELECT COUNT(*) INTO EXISTE FROM CLIENTE WHERE EMAIL= UPPER(EMAILC);
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL EMAIL YA FUE INGRESADO O NO');
            ROLLBACK;
END;		
/
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA CLIENTE

CREATE OR REPLACE PROCEDURE INSERTAR_CLIENTE(
	ID IN CLIENTE.NUMERO_DOCUMENTO%TYPE,
 	NOMBREC IN CLIENTE.NOMBRE%TYPE,
	APELLIDOC IN CLIENTE.APELLIDO%TYPE,
	FECHAN IN VARCHAR2,
	GENEROC IN CLIENTE.GENERO%TYPE,
	TIPO IN CLIENTE.TIPO_DOCUMENTO%TYPE,
	TELEF IN CLIENTE.TELEFONO%TYPE,
	EMAILC IN CLIENTE.EMAIL%TYPE,
	CONTRA IN CLIENTE.CONTRASENA%TYPE,
	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2	
)
IS 
	DOCUMENTO_INCORRECTO EXCEPTION;
    CLIENTE_EXISTE EXCEPTION;
    MENOR_EDAD EXCEPTION;
    TELEFONO_INCORRECTO EXCEPTION;
    EMAIL_EXISTE EXCEPTION;
    CONTRASENA_INSEGURA EXCEPTION;
	NUEVA_FECHA DATE := TO_DATE(FECHAN, 'DD/MM/YYYY');

BEGIN
	IF VERIFICAR_CLIENTE(ID) = FALSE THEN 
		IF VERIFICAR_EMAIL(EMAILC)= FALSE THEN 
			IF VERIFICAR_DOCUMENTO(TIPO,ID) = TRUE THEN
				IF VERIFICAR_EDAD(NUEVA_FECHA) = TRUE THEN
					IF LENGTH(TELEF) IN (9,10,11,12) THEN
						IF LENGTH(CONTRA) >7 AND LENGTH(CONTRA) <21 THEN
							LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
							INSERT INTO CLIENTE VALUES (ID,NOMBREC,APELLIDOC,NUEVA_FECHA,GENEROC,TIPO,TELEF,EMAILC,CONTRA);
							COMMIT;
							RESULTADO := 'TRUE';
							MENSAJE :='USTED FUE REGISTRADO CON ÉXITO';
						ELSE
							RAISE CONTRASENA_INSEGURA;
						END IF;
					ELSE
						RAISE TELEFONO_INCORRECTO;
					END IF;
				ELSE
					RAISE MENOR_EDAD;
				END IF;
	        ELSE 
	        	RAISE DOCUMENTO_INCORRECTO;
	        END IF;
	    ELSE
	    	RAISE EMAIL_EXISTE;
	   	END IF;
	ELSE
		RAISE CLIENTE_EXISTE;
	END IF;

   	EXCEPTION
   	WHEN CLIENTE_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='USTED YA SE HA REGISTRADO ANTERIORMENTE';
            ROLLBACK;
   	WHEN EMAIL_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL CORREO ELECTRÓNICO INGRESADO YA SE ENCUENTRS VINCULADO A UNA CUENTA';
            ROLLBACK;
    WHEN DOCUMENTO_INCORRECTO THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL NÚMERO DE DOCUMENTO NO EXISTE O ES INCORRECTO';
            ROLLBACK;
	WHEN MENOR_EDAD THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL CLIENTE A REGISTRAR NO PUEDE SER MENOR DE EDAD';
            ROLLBACK;
	WHEN TELEFONO_INCORRECTO THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL LARGO DEL TELEFONO INGRESADO ES INCORRECTO';
            ROLLBACK;
	WHEN CONTRASENA_INSEGURA THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='LA CONTRASEÑA ES INSEGURA, DEBE CONTENER 8 DÍGITOS';
            ROLLBACK;

 	WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;
/

-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE CLIENTE


CREATE OR REPLACE TRIGGER FORMATO_CLIENTE
BEFORE INSERT ON CLIENTE
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
	:NEW.APELLIDO := UPPER(:NEW.APELLIDO);
	:NEW.EMAIL := UPPER(:NEW.EMAIL);
	:NEW.CONTRASENA := UPPER(:NEW.CONTRASENA);
END;
/
-------------------------------------------
CREATE OR REPLACE FUNCTION VERIFICAR_CONTRASENA(
    EMAIL_I IN CLIENTE.EMAIL%TYPE,
	CONTRASENA_I IN CLIENTE.CONTRASENA%TYPE
)RETURN BOOLEAN
IS
    CONTRASENA_ALMACENADA VARCHAR2(100);
BEGIN
    SELECT CONTRASENA INTO CONTRASENA_ALMACENADA FROM CLIENTE WHERE EMAIL = UPPER(EMAIL_I);
	IF CONTRASENA_ALMACENADA= UPPER(CONTRASENA_I) THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;

EXCEPTION

    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;
/
CREATE OR REPLACE PROCEDURE INICIAR_SESION(
    EMAIL_I IN CLIENTE.EMAIL%TYPE,
    CONTRASENA_I IN CLIENTE.CONTRASENA%TYPE,
    RESULTADO OUT NVARCHAR2,
    MENSAJE OUT NVARCHAR2,
    ID OUT NVARCHAR2
)
IS 
    CONTRASENA_ALMACENADA NVARCHAR2(100);
    IDC NVARCHAR2(30);
	CONTRASENA_INCORRECTA EXCEPTION;
	EMAIL_INCORRECTO EXCEPTION;
BEGIN
    IF VERIFICAR_EMAIL(EMAIL_I) = TRUE THEN
        IF VERIFICAR_CONTRASENA(EMAIL_I, CONTRASENA_I)= TRUE THEN
			SELECT NUMERO_DOCUMENTO INTO IDC FROM CLIENTE WHERE EMAIL= UPPER(EMAIL_I);
            RESULTADO := 'TRUE';
            MENSAJE := 'HA INICIADO SESIÓN EXITOSAMENTE';
           	ID := IDC;
        ELSE
			RAISE CONTRASENA_INCORRECTA;          
        END IF;
    ELSE
        RAISE EMAIL_INCORRECTO;
    END IF;

EXCEPTION
	WHEN CONTRASENA_INCORRECTA THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'LA CONTRASENA INGRESADA ES INCORRECTA';
            ID := 'NONE';
            ROLLBACK;
	WHEN EMAIL_INCORRECTO THEN
			RESULTADO := 'FALSE';
        	MENSAJE := 'EL EMAIL INGRESADO NO EXISTE, DEBE REGISTRARSE';
       		ID := 'NONE';
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
		ID := 'NONE';
        ROLLBACK;
END;
/
------------------------------------------------------------------------------
-------------------------------TARIFA-------------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_TARIFA
IS 
BEGIN
		LOCK TABLE TARIFA IN ROW EXCLUSIVE MODE;
		INSERT INTO TARIFA VALUES (1,'CERO',0);
		INSERT INTO TARIFA VALUES (2,'PLUS',10000);
		INSERT INTO TARIFA VALUES (3,'PRO',25000);
		COMMIT;
END;
/
CALL INSERTAR_TARIFA();
/
------------------------------------------------------------------------------
------------------------------- PASAJE ------------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_PASAJE(
    NUM_PASAJES NUMBER,
    ID_C IN CARRITO.ID_CLIENTE%TYPE,
	ID_V IN PASAJE.VUELO%TYPE,
	ID_T IN PASAJE.TARIFA%TYPE

)
IS
    AUX VARCHAR2(30);
	PRECIO_VUELO NUMBER;
	PRECIO_TARIFA NUMBER;
BEGIN
    FOR I IN 1..NUM_PASAJES LOOP 
        LOCK TABLE PASAJE IN ROW EXCLUSIVE MODE;
        INSERT INTO PASAJE (ID_PASAJE,TARIFA,VUELO,ESTADO)VALUES ('X',ID_T,ID_V,'VALIDO');
        COMMIT;
        SELECT ID_PASAJE INTO AUX FROM (SELECT ID_PASAJE FROM PASAJE ORDER BY (TO_NUMBER(SUBSTR(ID_PASAJE, INSTR(ID_PASAJE,'-')+1, LENGTH(ID_PASAJE)))) DESC)  WHERE ROWNUM=1;
		SELECT VALOR INTO PRECIO_VUELO FROM VUELO WHERE ID_VUELO= ID_V;
		SELECT PRECIO INTO PRECIO_TARIFA FROM TARIFA WHERE ID_TARIFA= ID_T;
        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
        INSERT INTO CARRITO VALUES (AUX,ID_C,PRECIO_VUELO,PRECIO_TARIFA);
        COMMIT;
    END LOOP;
END;
/
-- TRIGGER PARA DEJAR EN MAYUSCULA LOS ATRIBUTOS DE PASAJE

CREATE SEQUENCE ID_PASAJE
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FORMATO_PASAJE
BEFORE INSERT ON PASAJE
FOR EACH ROW
DECLARE
BEGIN
    :NEW.ID_PASAJE := 'PASAJE-'|| ID_PASAJE.NEXTVAL;

END;
/
---------------------------  ASIENTO- PASAJES ----------------------------------
----------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_ASIENTO_PASAJE(
    ASIENTO_C PASAJE.ASIENTO%TYPE,
    ID_C IN CARRITO.ID_CLIENTE%TYPE

)
IS 
    CURSOR PASAJES IS SELECT ID_PASAJE FROM CARRITO WHERE ID_CLIENTE= ID_C;
    CODIGO_AUX NVARCHAR2(50);
	ASIENTO_AUX NVARCHAR2(50);
BEGIN
	OPEN PASAJES;	
    LOOP 
		FETCH PASAJES INTO CODIGO_AUX;
		SELECT ASIENTO INTO ASIENTO_AUX FROM PASAJE WHERE ID_PASAJE=CODIGO_AUX;
		IF ASIENTO_AUX IS NULL THEN
			LOCK TABLE PASAJE IN ROW EXCLUSIVE MODE;
			UPDATE PASAJE SET ASIENTO = ASIENTO_C WHERE ID_PASAJE= CODIGO_AUX;
			COMMIT;
			EXIT;
		END IF;
		EXIT WHEN PASAJES%NOTFOUND;
    END LOOP;
	CLOSE PASAJES;
END;
/

---------------------------  PASAJERO ----------------------------------
----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION VERIFICAR_VENCIMIENTO_DOC(
    FECHA IN PASAJERO.FECHA_VENCIMIENTO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
BEGIN
    IF FECHA > SYSDATE THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR AL VERIFICAR SI EL DOCUMENTO CADUCO O NO');
            ROLLBACK;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_PASAJERO(
    ID IN PASAJERO.NUMERO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM PASAJERO WHERE NUMERO_DOCUMENTO= ID;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE INSERTAR_PASAJERO(
	ID IN PASAJERO.NUMERO_DOCUMENTO%TYPE,
 	NOMBREC IN PASAJERO.NOMBRE%TYPE,
	APELLIDOC IN PASAJERO.APELLIDO%TYPE,
	FECHAN IN VARCHAR2,
	GENEROC IN PASAJERO.GENERO%TYPE,
	TIPO IN PASAJERO.TIPO_DOCUMENTO%TYPE,
	FECHA_VENC IN VARCHAR2,
	TELEF IN PASAJERO.TELEFONO%TYPE,
	EMAILC IN PASAJERO.CORREO%TYPE,
	NACION IN PASAJERO.NACIONALIDAD%TYPE,
	ID_A IN PASAJE.ASIENTO%TYPE,
	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2	
)
IS 
	DOCUMENTO_INCORRECTO EXCEPTION;
    MENOR_EDAD EXCEPTION;
    TELEFONO_INCORRECTO EXCEPTION;
	DOCUMENTO_CADUCADO EXCEPTION;
	NUEVA_FECHA DATE := TO_DATE(FECHAN, 'DD/MM/YYYY');
	NUEVA_FECHA_VENCIMIENTO DATE := TO_DATE(FECHA_VENC, 'DD/MM/YYYY');

BEGIN
	IF VERIFICAR_DOCUMENTO(TIPO,ID) = TRUE THEN 
		IF VERIFICAR_EDAD(NUEVA_FECHA) = TRUE THEN 
			IF VERIFICAR_VENCIMIENTO_DOC(NUEVA_FECHA_VENCIMIENTO)= TRUE THEN
				IF LENGTH(TELEF) IN (9,10,11,12) THEN
					IF VERIFICAR_PASAJERO(ID)=FALSE THEN
						LOCK TABLE PASAJERO IN ROW EXCLUSIVE MODE;
						INSERT INTO PASAJERO VALUES (ID,NOMBREC,APELLIDOC,NUEVA_FECHA,GENEROC,TIPO,NUEVA_FECHA_VENCIMIENTO,TELEF,EMAILC,NACION);
						COMMIT;
						INSERTAR_PASAJERO_PASAJE(ID_A,ID);
						RESULTADO := 'TRUE';
						MENSAJE :='EL PASAJERO FUE INGRESADO CON ÉXITO';
					ELSE
						LOCK TABLE PASAJERO IN ROW EXCLUSIVE MODE;
						UPDATE PASAJERO SET NOMBRE=UPPER(NOMBREC), APELLIDO=UPPER(APELLIDOC),GENERO=GENEROC, FECHA_VENCIMIENTO_DOCUMENTO= NUEVA_FECHA_VENCIMIENTO,TELEFONO=TELEF,CORREO=UPPER(EMAILC),NACIONALIDAD=UPPER(NACION) WHERE NUMERO_DOCUMENTO=UPPER(ID);
						COMMIT;
						INSERTAR_PASAJERO_PASAJE(ID_A,ID);
						RESULTADO := 'TRUE';
						MENSAJE :='EL PASAJERO FUE INGRESADO CON ÉXITO';
					END IF;
				ELSE
					RAISE TELEFONO_INCORRECTO;
				END IF;
	        ELSE 
	        	RAISE DOCUMENTO_CADUCADO;
	        END IF;
	    ELSE
	    	RAISE MENOR_EDAD;
	   	END IF;
	ELSE
		RAISE DOCUMENTO_INCORRECTO;
	END IF;

   	EXCEPTION
   	WHEN DOCUMENTO_CADUCADO THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='SU DOCUMENTO YA VENCIÓ, DEBE RENOVARLO';
            ROLLBACK;
    WHEN DOCUMENTO_INCORRECTO THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL NÚMERO DE DOCUMENTO NO EXISTE O ES INCORRECTO';
            ROLLBACK;
	WHEN MENOR_EDAD THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL CLIENTE A REGISTRAR NO PUEDE SER MENOR DE EDAD';
            ROLLBACK;
	WHEN TELEFONO_INCORRECTO THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='EL LARGO DEL TELEFONO INGRESADO ES INCORRECTO';
            ROLLBACK;

 	WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER FORMATO_PASAJERO
BEFORE INSERT ON PASAJERO
FOR EACH ROW
DECLARE

BEGIN
	:NEW.NOMBRE := UPPER(:NEW.NOMBRE);
	:NEW.APELLIDO := UPPER(:NEW.APELLIDO);
	:NEW.NUMERO_DOCUMENTO := UPPER(:NEW.NUMERO_DOCUMENTO);
	:NEW.CORREO := UPPER(:NEW.CORREO);
	:NEW.NACIONALIDAD := UPPER(:NEW.NACIONALIDAD);
END;
/
---------------------------  PASAJERO- PASAJES ----------------------------------
----------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_PASAJERO_PASAJE(
    ASIENTO_P PASAJE.ASIENTO%TYPE,
    ID_PASAJERO IN PASAJE.PASAJERO%TYPE
)
IS 

BEGIN
	
	LOCK TABLE PASAJE IN ROW EXCLUSIVE MODE;
	UPDATE PASAJE SET PASAJERO = ID_PASAJERO WHERE ASIENTO= ASIENTO_P AND ID_PASAJE IN (SELECT ID_PASAJE FROM CARRITO);
	COMMIT;

END;
/
---------------------------  BANCO ----------------------------------
----------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE INSERTAR_BANCO(
    NUM BANCO.NUMERO_TARJETA%TYPE,
    TIPOT BANCO.TIPO%TYPE,
	CV BANCO.CVV%TYPE,
	MESE BANCO.MES%TYPE,
	ANIOE BANCO.ANIO%TYPE
)
IS 
BEGIN
	LOCK TABLE BANCO IN ROW EXCLUSIVE MODE;
	INSERT INTO BANCO VALUES(NUM,TIPOT,CV,MESE,ANIOE);
	COMMIT;
END;
/
CALL INSERTAR_BANCO('4301882800350505','CREDITO',607,'02',2023);
/
---------------------------  ADMINISTRADOR ----------------------------------
----------------------------------------------------------------------

create or replace FUNCTION VERIFICAR_CONTRA_ADMIN(
    NOMBRE_I IN ADMINISTRADOR.NOMBRE%TYPE,
	CONTRASENA_I IN CLIENTE.CONTRASENA%TYPE
)RETURN BOOLEAN
IS
    CONTRASENA_ALMACENADA VARCHAR2(100);
BEGIN
    SELECT CONTRASENA INTO CONTRASENA_ALMACENADA FROM ADMINISTRADOR WHERE NOMBRE = UPPER(NOMBRE);
	IF CONTRASENA_ALMACENADA= UPPER(CONTRASENA_I) THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;

EXCEPTION

    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;
/

create or replace PROCEDURE INI_SESION_ADMIN(
    NOMBRE_I IN ADMINISTRADOR.NOMBRE%TYPE,
    CONTRASENA_I IN ADMINISTRADOR.CONTRASENA%TYPE,
    RESULTADO OUT NVARCHAR2,
    MENSAJE OUT NVARCHAR2
)
IS 
	CONTRASENA_INCORRECTA EXCEPTION;
BEGIN
        IF VERIFICAR_CONTRA_ADMIN(NOMBRE_I, CONTRASENA_I)= TRUE THEN
            RESULTADO := 'TRUE';
            MENSAJE := 'HA INICIADO SESIÓN EXITOSAMENTE';
        ELSE
			RAISE CONTRASENA_INCORRECTA;          
        END IF;
EXCEPTION
	WHEN CONTRASENA_INCORRECTA THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'LA CONTRASENA INGRESADA ES INCORRECTA';
            ROLLBACK;
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;
/

---------------------------  BOLETA - DETALLE ----------------------------------
----------------------------------------------------------------------
CREATE SEQUENCE ID_BOLETA
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE FUNCTION OBTENER_CODIGO_BOLETA
RETURN VARCHAR2
IS
    COD_MAXIMO_BOLETA VARCHAR2(20);
BEGIN
    COD_MAXIMO_BOLETA := 'BOLETA-'|| ID_BOLETA.NEXTVAL;
    RETURN COD_MAXIMO_BOLETA;
END;
/

CREATE OR REPLACE PROCEDURE GENERAR_COMPRA(
    ID IN CLIENTE.NUMERO_DOCUMENTO%TYPE
)
IS
    CODIGO_BOLETA_COMPRA NVARCHAR2(20);
    HORA_BOLETA NVARCHAR2(20);
    TOTAL_BOLETA NUMBER;
    TOTAL_DETA NUMBER;
    CANTIDAD_PASAJES_CARRITO NUMBER;
	CONTADOR NUMBER;

-- cursor de donde obtengo datos del carrito
    CURSOR LISTA_PASAJES_CARRITO IS SELECT ID_PASAJE, TOTAL_PASAJE, TOTAL_TARIFA FROM CARRITO WHERE ID_CLIENTE = ID;
    COD_P NVARCHAR2(20);
    TOTAL_PAS NUMBER;
    TOTAL_TAR NUMBER;

    VERIFICAR_STOCK BOOLEAN;
    VERIFICAR_REDUCCION_STOCK BOOLEAN;

BEGIN
    select to_char(sysdate, 'HH24:MI:SS') INTO HORA_BOLETA from dual;
    SELECT COUNT(*) INTO CANTIDAD_PASAJES_CARRITO FROM CARRITO WHERE ID_CLIENTE = ID;
    CONTADOR:= 0;   
    TOTAL_BOLETA := 0;
	CODIGO_BOLETA_COMPRA := OBTENER_CODIGO_BOLETA();
    LOCK TABLE BOLETA IN ROW EXCLUSIVE MODE;
    INSERT INTO BOLETA VALUES (CODIGO_BOLETA_COMPRA,ID, 0, 0,SYSDATE,HORA_BOLETA, 0);
    COMMIT;
	OPEN LISTA_PASAJES_CARRITO;
    LOOP                        
            FETCH LISTA_PASAJES_CARRITO INTO COD_P,TOTAL_PAS, TOTAL_TAR;
            EXIT WHEN LISTA_PASAJES_CARRITO%NOTFOUND;
            TOTAL_DETA := 0;
            TOTAL_DETA := (TOTAL_PAS + TOTAL_TAR);
            INSERT INTO DETALLE VALUES (CODIGO_BOLETA_COMPRA,COD_P,TOTAL_PAS,TOTAL_TAR,TOTAL_DETA);
            TOTAL_BOLETA := TOTAL_BOLETA + TOTAL_DETA;
            DISMINUIR_CAPACIDAD_VUELO(COD_P);
            CONTADOR:= CONTADOR + 1;
	END LOOP;
    CLOSE LISTA_PASAJES_CARRITO;
    IF CONTADOR = CANTIDAD_PASAJES_CARRITO THEN
        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
        DELETE FROM CARRITO WHERE ID_CLIENTE = ID;
		COMMIT;
		LOCK TABLE BOLETA IN ROW EXCLUSIVE MODE;
        UPDATE BOLETA SET TOTAL = TOTAL_BOLETA, TOTAL_FINAL= TOTAL_BOLETA WHERE ID_BOLETA = CODIGO_BOLETA_COMPRA;
        COMMIT;
    END IF;
END;
/
-- FUNCION PARA PONER EN NO DISPONIBLE LOS ASIENTOS COMPRADOS Y DISMINIUR CAPACIDAD EN VUELO

CREATE OR REPLACE PROCEDURE DISMINUIR_CAPACIDAD_VUELO(
    COD_PASAJE IN PASAJE.ID_PASAJE%TYPE
)
IS
    ID_V NVARCHAR2(20);
	ID_ASIENT NVARCHAR2(20);
BEGIN
    SELECT V.ID_VUELO INTO ID_V FROM VUELO V JOIN PASAJE P ON V.ID_VUELO= P.VUELO WHERE P.ID_PASAJE=COD_PASAJE;
	SELECT ASIENTO INTO ID_ASIENT FROM PASAJE WHERE ID_PASAJE=COD_PASAJE;

    UPDATE VUELO SET CAPACIDAD = (CAPACIDAD - 1) WHERE ID_VUELO = ID_V;
	UPDATE VUELO_ASIENTO SET ESTADO = 'NO DISPONIBLE' WHERE ID_VUELO= ID_V AND ID_ASIENTO= ID_ASIENT; 

END;
/
---------------------------  CLIENTE - MODIFICACION ITINERARIO ----------------------------------
----------------------------------------------------------------------

-- PARA INSERTAR PASAJES Y PONER EN CARRITO MANTENIENDO EL PRECIO ANTIGUO DEL VUELO
CREATE OR REPLACE PROCEDURE INSERTAR_PASAJE_DOS(
    NUM_PASAJES NUMBER,
    ID_C IN CARRITO.ID_CLIENTE%TYPE,
	ID_V IN PASAJE.VUELO%TYPE,
	ID_T IN PASAJE.TARIFA%TYPE,
    ID_V_ANTIGUO IN PASAJE.VUELO%TYPE 

)
IS
    AUX VARCHAR2(30);
	PRECIO_VUELO NUMBER;
	PRECIO_TARIFA NUMBER;
BEGIN
    FOR I IN 1..NUM_PASAJES LOOP 
        LOCK TABLE PASAJE IN ROW EXCLUSIVE MODE;
        INSERT INTO PASAJE (ID_PASAJE,TARIFA,VUELO,ESTADO)VALUES ('X',ID_T,ID_V,'VALIDO');
        COMMIT;
        SELECT ID_PASAJE INTO AUX FROM (SELECT ID_PASAJE FROM PASAJE ORDER BY (TO_NUMBER(SUBSTR(ID_PASAJE, INSTR(ID_PASAJE,'-')+1, LENGTH(ID_PASAJE)))) DESC)  WHERE ROWNUM=1;
		SELECT VALOR INTO PRECIO_VUELO FROM VUELO WHERE ID_VUELO= ID_V_ANTIGUO;
		SELECT PRECIO INTO PRECIO_TARIFA FROM TARIFA WHERE ID_TARIFA= ID_T;
        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
        INSERT INTO CARRITO VALUES (AUX,ID_C,PRECIO_VUELO,PRECIO_TARIFA);
        COMMIT;
    END LOOP;
END;

-- PARA VERIFICAR QUE EL DOC EXISTA YA EN LOS PASAJEROS DE LA ANTIGUA BOLETA
CREATE OR REPLACE FUNCTION VERIFICAR_DOCUMENTO_ANTIGUO(
    ID PASAJERO.NUMERO_DOCUMENTO%TYPE,
    ID_B IN BOLETA.ID_BOLETA%TYPE
)RETURN BOOLEAN
IS
	CURSOR PASAJES_BOLETA IS SELECT P.PASAJERO FROM BOLETA B JOIN DETALLE D ON B.ID_BOLETA=D.ID_BOLETA JOIN PASAJE P ON P.ID_PASAJE=D.PASAJE WHERE B.ID_BOLETA = ID_B;
    COD_P NVARCHAR2(20);

BEGIN
	OPEN PASAJES_BOLETA;
    LOOP                        
            FETCH PASAJES_BOLETA INTO COD_P;
            EXIT WHEN PASAJES_BOLETA%NOTFOUND;
			IF ID=COD_P THEN
				RETURN TRUE;
				EXIT;
			END IF;
	END LOOP;
    CLOSE PASAJES_BOLETA;
	RETURN FALSE; 
END;

-- PARA VERIFICAR QUE EL DOC NO SE HA ASIGNADO A UN ASIENTO
CREATE OR REPLACE FUNCTION VERIFICAR_DOCUMENTO_ASIGNADO(
    ID PASAJERO.NUMERO_DOCUMENTO%TYPE
)RETURN BOOLEAN
IS
    AUX NUMBER;

BEGIN
    SELECT COUNT(*) INTO AUX FROM PASAJE WHERE PASAJERO=ID AND ID_PASAJE IN (SELECT ID_PASAJE FROM CARRITO);
    IF AUX>0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;

-- PARA QUE EN CASO QUE UN PASAJERO DE FALSE, SE QUITE
CREATE OR REPLACE PROCEDURE QUITAR_PASAJERO(
    ID_PASAJERO IN PASAJE.PASAJERO%TYPE
)
IS

BEGIN
    LOCK TABLE PASAJE IN ROW EXCLUSIVE MODE;
	UPDATE PASAJE SET PASAJERO = NULL WHERE ID_PASAJE IN (SELECT ID_PASAJE FROM CARRITO);
	COMMIT;
END;

CREATE OR REPLACE PROCEDURE INSERTAR_PASAJERO_DOS(
	ID IN PASAJERO.NUMERO_DOCUMENTO%TYPE,
	ID_A IN PASAJE.ASIENTO%TYPE,
	ID_BOLETAA IN BOLETA.ID_BOLETA%TYPE,
	RESULTADO OUT NVARCHAR2,
   	MENSAJE OUT NVARCHAR2	
)
IS
    PASAJERO_ASIGNADO EXCEPTION;
	PASAJERO_NO_EXISTE EXCEPTION;
BEGIN
	IF VERIFICAR_DOCUMENTO_ANTIGUO(ID,ID_BOLETAA) = TRUE THEN 
		IF VERIFICAR_DOCUMENTO_ASIGNADO(ID)= FALSE THEN
			INSERTAR_PASAJERO_PASAJE(ID_A,ID);
			RESULTADO := 'TRUE';
			MENSAJE :='EL ASIENTO FUE ASIGNADO CON ÉXITO';
		ELSE
            RAISE PASAJERO_ASIGNADO;			
			
		END IF;
	ELSE			
		RAISE PASAJERO_NO_EXISTE;
	END IF;

   	EXCEPTION
   	WHEN PASAJERO_ASIGNADO THEN
            RESULTADO := 'FALSE';
			MENSAJE :='El pasajero ' || ID|| ' ya se encuentra asignado a un asiento, por favor ingrese los datos nuevamente.';
            ROLLBACK;
    WHEN PASAJERO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
        	MENSAJE :='El numero de documento ' || ID|| ' no existe o es incorrecto, por favor ingrese los datos nuevamente.';
            ROLLBACK;
 	WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE :='ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;

-- FUNCION PARA PONER EN DISPONIBLE LOS ASIENTOS ANULADOS Y AUMENTAR CAPACIDAD EN VUELO

CREATE OR REPLACE PROCEDURE AUMENTAR_CAPACIDAD_VUELO(
    COD_PASAJE IN PASAJE.ID_PASAJE%TYPE
)
IS
    ID_V NVARCHAR2(20);
	ID_ASIENT NVARCHAR2(20);
BEGIN
    SELECT V.ID_VUELO INTO ID_V FROM VUELO V JOIN PASAJE P ON V.ID_VUELO= P.VUELO WHERE P.ID_PASAJE=COD_PASAJE;
	SELECT ASIENTO INTO ID_ASIENT FROM PASAJE WHERE ID_PASAJE=COD_PASAJE;
    LOCK TABLE VUELO IN ROW EXCLUSIVE MODE;
    UPDATE VUELO SET CAPACIDAD = (CAPACIDAD + 1) WHERE ID_VUELO = ID_V;
    COMMIT;
    LOCK TABLE VUELO_ASIENTO IN ROW EXCLUSIVE MODE;
	UPDATE VUELO_ASIENTO SET ESTADO = 'DISPONIBLE' WHERE ID_VUELO= ID_V AND ID_ASIENTO= ID_ASIENT; 
    COMMIT;

END;

-- PARA OBTENER LO QUE DEBE PAGAR POR LA MULTA
CREATE OR REPLACE FUNCTION OBTENER_VALOR_MULTA(
    TOTAL_B IN BOLETA.TOTAL%TYPE
)RETURN NUMBER
IS
    VALOR NUMBER;

BEGIN
    VALOR := TOTAL_B * 0.2;
    RETURN VALOR;
END;

-- PARA OBTENER EL VALOR DE MULTA A PAGAR EN VISTA PAGO SIN INSERTAR AUN BOLETA DETALLE
CREATE OR REPLACE PROCEDURE OBTENER_PAGO_MULTA(
    ID IN CLIENTE.NUMERO_DOCUMENTO%TYPE,
    MULTA OUT NUMBER
)
IS
    TOTAL_DETA NUMBER;

-- cursor de donde obtengo datos del carrito
    CURSOR LISTA_PASAJES_CARRITO IS SELECT ID_PASAJE, TOTAL_PASAJE, TOTAL_TARIFA FROM CARRITO WHERE ID_CLIENTE = ID;
    COD_P NVARCHAR2(20);
    TOTAL_PAS NUMBER;
    TOTAL_TAR NUMBER;
    
BEGIN
    TOTAL_DETA := 0;
	OPEN LISTA_PASAJES_CARRITO;
    LOOP                        
            FETCH LISTA_PASAJES_CARRITO INTO COD_P,TOTAL_PAS, TOTAL_TAR;
            EXIT WHEN LISTA_PASAJES_CARRITO%NOTFOUND;
            TOTAL_DETA := TOTAL_DETA + (TOTAL_PAS + TOTAL_TAR);
	END LOOP;
    CLOSE LISTA_PASAJES_CARRITO;
    MULTA:= TOTAL_DETA*0.2;
END;

CREATE OR REPLACE PROCEDURE GENERAR_COMPRA_DOS(
    ID IN CLIENTE.NUMERO_DOCUMENTO%TYPE,
    ID_B IN BOLETA.ID_BOLETA%TYPE
)
IS
    CODIGO_BOLETA_COMPRA NVARCHAR2(20);
    HORA_BOLETA NVARCHAR2(20);
    TOTAL_BOLETA NUMBER;
    TOTAL_DETA NUMBER;
    CANTIDAD_PASAJES_CARRITO NUMBER;
	CONTADOR NUMBER;

-- cursor de donde obtengo datos del carrito
    CURSOR LISTA_PASAJES_CARRITO IS SELECT ID_PASAJE, TOTAL_PASAJE, TOTAL_TARIFA FROM CARRITO WHERE ID_CLIENTE = ID;
    COD_P NVARCHAR2(20);
    TOTAL_PAS NUMBER;
    TOTAL_TAR NUMBER;
    
-- cursor de donde obtengo pasajes antiguos
    CURSOR PASAJES_ANTIGUOS IS SELECT P.ID_PASAJE FROM BOLETA B JOIN DETALLE D ON B.ID_BOLETA= D.ID_BOLETA JOIN PASAJE P ON P.ID_PASAJE=D.PASAJE  WHERE B.ID_BOLETA = ID_B;
    COD_PA NVARCHAR2(20);

    VERIFICAR_STOCK BOOLEAN;
    VERIFICAR_REDUCCION_STOCK BOOLEAN;

    VALOR_MULTA NUMBER;

BEGIN
    select to_char(sysdate, 'HH24:MI:SS') INTO HORA_BOLETA from dual;
    SELECT COUNT(*) INTO CANTIDAD_PASAJES_CARRITO FROM CARRITO WHERE ID_CLIENTE = ID;
    CONTADOR:= 0;   
    TOTAL_BOLETA := 0;
	CODIGO_BOLETA_COMPRA := OBTENER_CODIGO_BOLETA();
    LOCK TABLE BOLETA IN ROW EXCLUSIVE MODE;
    INSERT INTO BOLETA VALUES (CODIGO_BOLETA_COMPRA,ID, 0, 0,SYSDATE,HORA_BOLETA, 0);
    COMMIT;
	OPEN LISTA_PASAJES_CARRITO;
    LOOP                        
            FETCH LISTA_PASAJES_CARRITO INTO COD_P,TOTAL_PAS, TOTAL_TAR;
            EXIT WHEN LISTA_PASAJES_CARRITO%NOTFOUND;
            TOTAL_DETA := 0;
            TOTAL_DETA := (TOTAL_PAS + TOTAL_TAR);
            LOCK TABLE DETALLE IN ROW EXCLUSIVE MODE;
            INSERT INTO DETALLE VALUES (CODIGO_BOLETA_COMPRA,COD_P,TOTAL_PAS,TOTAL_TAR,TOTAL_DETA);
            COMMIT;
            TOTAL_BOLETA := TOTAL_BOLETA + TOTAL_DETA;
            DISMINUIR_CAPACIDAD_VUELO(COD_P);
            CONTADOR:= CONTADOR + 1;
	END LOOP;
    CLOSE LISTA_PASAJES_CARRITO;
    IF CONTADOR = CANTIDAD_PASAJES_CARRITO THEN
        VALOR_MULTA:= OBTENER_VALOR_MULTA(TOTAL_BOLETA);
        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
        DELETE FROM CARRITO WHERE ID_CLIENTE = ID;
		COMMIT;
		LOCK TABLE BOLETA IN ROW EXCLUSIVE MODE;
        UPDATE BOLETA SET TOTAL = TOTAL_BOLETA, TOTAL_FINAL= (TOTAL_BOLETA+VALOR_MULTA), MULTA= VALOR_MULTA WHERE ID_BOLETA = CODIGO_BOLETA_COMPRA;
        COMMIT;
    END IF;

    -- para aumentar sotck del vuelo cancelado
    OPEN PASAJES_ANTIGUOS;
    LOOP                        
            FETCH PASAJES_ANTIGUOS INTO COD_PA;
            EXIT WHEN PASAJES_ANTIGUOS%NOTFOUND;
            LOCK TABLE PASAJE IN ROW EXCLUSIVE MODE;
            UPDATE PASAJE SET ESTADO= 'INVALIDO' WHERE ID_PASAJE=COD_PA;
            COMMIT;
            AUMENTAR_CAPACIDAD_VUELO(COD_PA);
	END LOOP;
    CLOSE PASAJES_ANTIGUOS;
END;
---------------------------  PRUEBA ----------------------------------
----------------------------------------------------------------------

DECLARE
    RESULTADO NVARCHAR2(50);
    MENSAJE NVARCHAR2(50);
BEGIN
    INSERTAR_PAIS ('cl','chile', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_PAIS ('ARG','argentina', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_PAIS ('br','brasil', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_PAIS ('mx','mexico', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_PAIS ('pe','peru', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM PAIS;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_CIUDAD ('SCL','santiago','CL', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;


DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_CIUDAD ('ari','arica','CL', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_CIUDAD ('lim','lima','PE', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM CIUDAD;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_AVION ('Boeing 787-9',2010, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_AVION ('Boeing 787-8',2015, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM AVION;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_AEROPUERTO ('arturo merino benítez','SCL','Avenida Armando Cortinez Norte, Pudahuel', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_AEROPUERTO ('CHACALLUTA','ARI','Ruta 12 3150', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_AEROPUERTO ('jorge chávez','lim','Av. Elmer Faucett s/n, Callao 07031', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;


SELECT * FROM AEROPUERTO;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ORIGEN ('ARPT-1', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ORIGEN ('ARPT-2', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ORIGEN ('ARPT-3', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM ORIGEN;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_DESTINO ('ARPT-1', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_DESTINO ('ARPT-2', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_DESTINO ('ARPT-3', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM DESTINO;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ITINERARIO ('19/02/2020','08:00','19/02/2020','19:30','ORIG-1','DEST-2', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ITINERARIO ('22/03/2020','08:00','19/02/2020','19:30','ORIG-1','DEST-2', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ITINERARIO ('24/03/2020','08:00','19/02/2020','19:30','ORIG-1','DEST-2', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ITINERARIO ('25/03/2020','08:00','19/02/2020','19:30','ORIG-1','DEST-2', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ITINERARIO ('20/02/2020','08:00','22/02/2020','11:30','ORIG-1','DEST-3', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_ITINERARIO ('20/02/2020','08:00','20/02/2020','19:30','ORIG-2','DEST-1', resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM ITINERARIO;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_VUELO('AVION-1','ITNR-1',9000, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_VUELO('AVION-1','ITNR-21',8000, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_VUELO('AVION-1','ITNR-22',8000, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_VUELO('AVION-1','ITNR-23',8000, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_VUELO('AVION-2','ITNR-2',50000, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

DECLARE
    RESULTADO NVARCHAR2(100);
    MENSAJE NVARCHAR2(100);
BEGIN
    INSERTAR_VUELO('AVION-1','ITNR-3',9000, resultado, mensaje);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;


SELECT * FROM VUELO;

SELECT * FROM VUELO_ASIENTO;

-- rut de prueba
210715231
234747770
63544663

165920708

69123198

5623866-2

13539621-4


select * from boleta;
select * from detalle;
select * from pasaje;
select * from vuelo;
select * from asiento_vuelo;

delete from boleta;
delete from pasaje;
delete from pasajero;